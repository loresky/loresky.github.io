<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gos on </title>
    <link>https://loresky.github.io/go/</link>
    <description>Recent content in Gos on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 12 Jun 2018 17:13:23 +0800</lastBuildDate>
    
	<atom:link href="https://loresky.github.io/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>定时删除文件</title>
      <link>https://loresky.github.io/go/%E5%AE%9A%E6%97%B6%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6/</link>
      <pubDate>Tue, 12 Jun 2018 17:13:23 +0800</pubDate>
      
      <guid>https://loresky.github.io/go/%E5%AE%9A%E6%97%B6%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6/</guid>
      <description>package main import ( &amp;quot;fmt&amp;quot; &amp;quot;log&amp;quot; &amp;quot;os&amp;quot; &amp;quot;strconv&amp;quot; &amp;quot;github.com/BurntSushi/toml&amp;quot; &amp;quot;github.com/robfig/cron&amp;quot; ) type config struct { Dirurl string `toml:&amp;quot;dirurl&amp;quot;` } var ( Config config ) func main() { // var a interface{} // var b int // a = 1 // b = a.(int) // fmt.Println(a, b) // aa() // os.RemoveAll(&amp;quot;/home/cat/goProjects/src/test/aa/aaa&amp;quot;) if _, err := toml.DecodeFile(&amp;quot;./conf.toml&amp;quot;, &amp;amp;Config); err != nil { fmt.Println(&amp;quot;config decode err:&amp;quot; + err.Error()) return } fmt.Println(Config.Dirurl) // os.RemoveAll(Config.Dirurl) c := cron.</description>
    </item>
    
    <item>
      <title>Go打包</title>
      <link>https://loresky.github.io/go/go%E6%89%93%E5%8C%85/</link>
      <pubDate>Tue, 08 May 2018 14:42:56 +0800</pubDate>
      
      <guid>https://loresky.github.io/go/go%E6%89%93%E5%8C%85/</guid>
      <description>CGO_ENABLED=0 GOOS=windows GOARCH=386 go build main.go  GOOS：目标平台的操作系统 darwin、freebsd、linux、windows
GOARCH：目标平台的体系架构 386、amd64、arm
交叉编译不支持 CGO 所以要禁用它</description>
    </item>
    
    <item>
      <title>Go第三方包</title>
      <link>https://loresky.github.io/go/go%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85/</link>
      <pubDate>Mon, 30 Apr 2018 21:32:46 +0800</pubDate>
      
      <guid>https://loresky.github.io/go/go%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85/</guid>
      <description> 日志  logrus  toml  toml go-toml  json  go gjson gojsonq  jwt  jwt-go  orm  gorm  sql驱动  mysql  mysql  pgsql  pq  mongodb  mgo   时间工具  now  模板引擎  hero  缓存库  groupcache  任意精度的定点小数  decimal  资源嵌入(地址)  go.rice go-bindata go-bindata-assetfs esc  </description>
    </item>
    
    <item>
      <title>go递归函数</title>
      <link>https://loresky.github.io/go/go%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sat, 06 Jan 2018 20:08:49 +0000</pubDate>
      
      <guid>https://loresky.github.io/go/go%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0/</guid>
      <description> 当一个函数在其函数体内调用自身，则称之为递归。最经典的例子便是计算斐波那契数列，即每个数均为前两个数之和 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89
package main import &amp;quot;fmt&amp;quot; func main() { result := 0 for i := 0; i &amp;lt;= 10; i++ { result = fibonacci(i) fmt.Printf(&amp;quot;fibonacci(%d) is: %d\n&amp;quot;, i, result) } } func fibonacci(n int) (res int) { if n &amp;lt;= 1 { res = 1 } else { res = fibonacci(n-1) + fibonacci(n-2) } return } //输出： fibonacci(0) is: 1 fibonacci(1) is: 1 fibonacci(2) is: 2 fibonacci(3) is: 3 fibonacci(4) is: 5 fibonacci(5) is: 8 fibonacci(6) is: 13 fibonacci(7) is: 21 fibonacci(8) is: 34 fibonacci(9) is: 55 fibonacci(10) is: 89  </description>
    </item>
    
    <item>
      <title>go内置函数</title>
      <link>https://loresky.github.io/go/go%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sat, 06 Jan 2018 19:54:28 +0000</pubDate>
      
      <guid>https://loresky.github.io/go/go%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</guid>
      <description> Go 语言拥有一些不需要进行导入操作就可以使用的内置函数。它们有时可以针对不同的类型进行操作，例如：len、cap 和 append，或必须用于系统级的操作，例如：panic。因此，它们需要直接获得编译器的支持。    名称 说明     close 用于管道通信   len/cap len 用于返回某个类型的长度或数量（字符串、数组、切片、map 和管道）；cap 是容量的意思，用于返回某个类型的最大容量（只能用于切片和 map）   new/make new 和 make 均是用于分配内存：new 用于值类型和用户定义的类型，如自定义结构，make 用户内置引用类型（切片、map 和管道）。它们的用法就像是函数，但是将类型作为参数：new(type)、make(type)。new(T) 分配类型 T 的零值并返回其地址，也就是指向类型 T 的指针。它也可以被用于基本类型：v := new(int)。make(T) 返回类型 T 的初始化之后的值，因此它比 new 进行更多的工作,new() 是一个函数，不要忘记它的括号   copy/append 用于复制和连接切片   panic/recover 两者均用于错误处理机制   print/println 底层打印函数，在部署环境中建议使用 fmt 包   complex/realimag 用于创建和操作复数    </description>
    </item>
    
    <item>
      <title>go追踪和defer</title>
      <link>https://loresky.github.io/go/go%E8%BF%BD%E8%B8%AA%E5%92%8Cdefer/</link>
      <pubDate>Sat, 06 Jan 2018 19:04:21 +0000</pubDate>
      
      <guid>https://loresky.github.io/go/go%E8%BF%BD%E8%B8%AA%E5%92%8Cdefer/</guid>
      <description>关键字 defer 允许我们推迟到函数返回之前（或任意位置执行 return 语句之后）一刻才执行某个语句或函数（为什么要在返回之后才执行这些语句？因为 return 语句同样可以包含一些操作，而不是单纯地返回某个值）。 关键字 defer 的用法类似于面向对象编程语言 Java 和 C# 的 finally 语句块，它一般用于释放某些已分配的资源。
package main import &amp;quot;fmt&amp;quot; func main() { function1() } func function1() { fmt.Printf(&amp;quot;In function1 at the top\n&amp;quot;) defer function2() fmt.Printf(&amp;quot;In function1 at the bottom!\n&amp;quot;) } func function2() { fmt.Printf(&amp;quot;function2: Deferred until the end of the calling function!&amp;quot;) } //输出： In Function1 at the top In Function1 at the bottom! Function2: Deferred until the end of the calling function!</description>
    </item>
    
    <item>
      <title>go传递变长参数</title>
      <link>https://loresky.github.io/go/go%E4%BC%A0%E9%80%92%E5%8F%98%E9%95%BF%E5%8F%82%E6%95%B0/</link>
      <pubDate>Sat, 06 Jan 2018 18:45:46 +0000</pubDate>
      
      <guid>https://loresky.github.io/go/go%E4%BC%A0%E9%80%92%E5%8F%98%E9%95%BF%E5%8F%82%E6%95%B0/</guid>
      <description>如果函数的最后一个参数是采用 &amp;hellip;type 的形式，那么这个函数就可以处理一个变长的参数，这个长度可以为 0，这样的函数称为变参函数。 func myFunc(a, b, arg ...int) {} 示例函数和调用：
func Greeting(prefix string, who ...string) Greeting(&amp;quot;hello:&amp;quot;, &amp;quot;Joe&amp;quot;, &amp;quot;Anna&amp;quot;, &amp;quot;Eileen&amp;quot;)  在 Greeting 函数中，变量 who 的值为 []string{&amp;ldquo;Joe&amp;rdquo;, &amp;ldquo;Anna&amp;rdquo;, &amp;ldquo;Eileen&amp;rdquo;}。 如果参数被存储在一个数组 arr 中，则可以通过 arr&amp;hellip; 的形式来传递参数调用变参函数。 1. 使用结构 定义一个结构类型，假设它叫 Options，用以存储所有可能的参数：
type Options struct { par1 type1, par2 type2, ... }  函数 F1 可以使用正常的参数 a 和 b，以及一个没有任何初始化的 Options 结构： F1(a, b, Options {})。如果需要对选项进行初始化，则可以使用 F1(a, b, Options {par1:val1, par2:val2})。 2. 使用空接口 如果一个变长参数的类型没有被指定，则可以使用默认的空接口 interface{}，这样就可以接受任何类型的参数。该方案不仅可以用于长度未知的参数，还可以用于任何不确定类型的参数。一般而言我们会使用一个 for-range 循环以及 switch 结构对每个参数的类型进行判断：</description>
    </item>
    
    <item>
      <title>go函数参数与返回值</title>
      <link>https://loresky.github.io/go/go%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%B8%8E%E8%BF%94%E5%9B%9E%E5%80%BC/</link>
      <pubDate>Sat, 06 Jan 2018 17:19:00 +0000</pubDate>
      
      <guid>https://loresky.github.io/go/go%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%B8%8E%E8%BF%94%E5%9B%9E%E5%80%BC/</guid>
      <description>1. 按值传递（call by value） 按引用传递（call by reference） Go 默认使用按值传递来传递参数，也就是传递参数的副本。 指针也是变量类型，有自己的地址和值，通常指针的值指向一个变量的地址。所以，按引用传递也是按值传递 几乎在任何情况下，传递指针（一个32位或者64位的值）的消耗都比传递副本来得少。
在函数调用时，像切片（slice）、字典（map）、接口（interface）、通道（channel）这样的引用类型都是默认使用引用传递（即使没有显示的指出指针）。
package main import &amp;quot;fmt&amp;quot; func main() { fmt.Printf(&amp;quot;Multiply 2 * 5 * 6 = %d\n&amp;quot;, MultiPly3Nums(2, 5, 6)) // var i1 int = MultiPly3Nums(2, 5, 6) // fmt.Printf(&amp;quot;MultiPly 2 * 5 * 6 = %d\n&amp;quot;, i1) } func MultiPly3Nums(a int, b int, c int) int { // var product int = a * b * c // return product return a * b * c }  2.</description>
    </item>
    
    <item>
      <title>go标签与goto</title>
      <link>https://loresky.github.io/go/go%E6%A0%87%E7%AD%BE%E4%B8%8Egoto/</link>
      <pubDate>Sat, 06 Jan 2018 16:50:02 +0000</pubDate>
      
      <guid>https://loresky.github.io/go/go%E6%A0%87%E7%AD%BE%E4%B8%8Egoto/</guid>
      <description>for、switch 或 select 语句都可以配合标签（label）形式的标识符使用，即某一行第一个以冒号（:）结尾的单词（gofmt 会将后续代码自动移至下一行）。 **标签的名称是大小写敏感的，为了提升可读性，一般建议使用全部大写字母） **
package main import &amp;quot;fmt&amp;quot; func main() { LABEL1: for i := 0; i &amp;lt;= 5; i++ { for j := 0; j &amp;lt;= 5; j++ { if j == 4 { continue LABEL1 } fmt.Printf(&amp;quot;i is: %d, and j is: %d\n&amp;quot;, i, j) } } }  package main func main() { i:=0 HERE: print(i) i++ if i==5 { return } goto HERE }  </description>
    </item>
    
    <item>
      <title>go结构for</title>
      <link>https://loresky.github.io/go/go%E7%BB%93%E6%9E%84for/</link>
      <pubDate>Sat, 06 Jan 2018 16:26:28 +0000</pubDate>
      
      <guid>https://loresky.github.io/go/go%E7%BB%93%E6%9E%84for/</guid>
      <description>1. 基于计数器的迭代 for 初始化语句; 条件语句; 修饰语句 {}
package main import &amp;quot;fmt&amp;quot; func main() { for i := 0; i &amp;lt; 5; i++ { fmt.Printf(&amp;quot;This is the %d iteration\n&amp;quot;, i) } }  循环中同时使用多个计数器：
**for i, j := 0, N; i &amp;lt; j; i, j = i+1, j-1 {} ** 2. 基于条件判断的迭代 for 结构的第二种形式是没有头部的条件判断迭代（类似其它语言中的 while 循环），基本形式为：for 条件语句 {}。 您也可以认为这是没有初始化语句和修饰语句的 for 结构，因此 ;; 便是多余的了。
package main import &amp;quot;fmt&amp;quot; func main() { var i int = 5 for i &amp;gt;= 0 { i = i - 1 fmt.</description>
    </item>
    
    <item>
      <title>go结构switch</title>
      <link>https://loresky.github.io/go/go%E7%BB%93%E6%9E%84switch/</link>
      <pubDate>Sat, 06 Jan 2018 15:48:00 +0000</pubDate>
      
      <guid>https://loresky.github.io/go/go%E7%BB%93%E6%9E%84switch/</guid>
      <description>Go 语言中的 switch 结构使用上更加灵活。它接受任意形式的表达式： switch var1 { case val1: ... case val2: ... default: ... }  如果执行完每个分支的代码后，还希望继续执行后续分支的代码，可以使用 fallthrough 关键字来达到目的 switch i { case 0: fallthrough case 1: f() // 当 i == 0 时函数也会被调用 }  switch 语句的第二种形式是不提供任何被判断的值（实际上默认为判断是否为 true） package main import &amp;quot;fmt&amp;quot; func main() { var num1 int = 7 switch { case num1 &amp;lt; 0: fmt.Println(&amp;quot;Number is negative&amp;quot;) case num1 &amp;gt; 0 &amp;amp;&amp;amp; num1 &amp;lt; 10: fmt.</description>
    </item>
    
    <item>
      <title>go多返回值函数的错误</title>
      <link>https://loresky.github.io/go/go%E5%A4%9A%E8%BF%94%E5%9B%9E%E5%80%BC%E5%87%BD%E6%95%B0%E7%9A%84%E9%94%99%E8%AF%AF/</link>
      <pubDate>Sat, 06 Jan 2018 15:34:47 +0000</pubDate>
      
      <guid>https://loresky.github.io/go/go%E5%A4%9A%E8%BF%94%E5%9B%9E%E5%80%BC%E5%87%BD%E6%95%B0%E7%9A%84%E9%94%99%E8%AF%AF/</guid>
      <description>anInt, _ = strconv.Atoi(origStr)  如果 origStr 不能被转换为整数，anInt 的值会变成 0 而 _ 无视了错误，程序会继续运行。
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;strconv&amp;quot; ) func main() { var orig string = &amp;quot;ABC&amp;quot; // var an int var newS string // var err error fmt.Printf(&amp;quot;The size of ints is: %d\n&amp;quot;, strconv.IntSize) // anInt, err = strconv.Atoi(origStr) an, err := strconv.Atoi(orig) if err != nil { fmt.Printf(&amp;quot;orig %s is not an integer - exiting with error\n&amp;quot;, orig) return } // 未发生错误，继续执行： fmt.</description>
    </item>
    
    <item>
      <title>go字符串</title>
      <link>https://loresky.github.io/go/go%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Sat, 06 Jan 2018 15:06:42 +0000</pubDate>
      
      <guid>https://loresky.github.io/go/go%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>Go 支持以下 2 种形式的字面值： * 解释字符串： **该类字符串使用双引号括起来，其中的相关的转义字符将被替换，这些转义字符包括： ** 1. \n：换行符 2. \r：回车符 3. \t：tab 键 4. \u 或 \U：Unicode 字符 5. \：反斜杠自身 * 非解释字符串： 该类字符串使用反引号括起来，支持换行，例如：
 `This is a raw string \n` 中的 `\n\` 会被原样输出。  </description>
    </item>
    
    <item>
      <title>go基本类型和运算符</title>
      <link>https://loresky.github.io/go/go%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Sat, 06 Jan 2018 14:17:43 +0000</pubDate>
      
      <guid>https://loresky.github.io/go/go%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>1.布尔类型 bool 非运算符：!
!T -&amp;gt; false !F -&amp;gt; true  和运算符：&amp;amp;&amp;amp;
T &amp;amp;&amp;amp; T -&amp;gt; true T &amp;amp;&amp;amp; F -&amp;gt; false F &amp;amp;&amp;amp; T -&amp;gt; false F &amp;amp;&amp;amp; F -&amp;gt; false  或运算符：||
T || T -&amp;gt; true T || F -&amp;gt; true F || T -&amp;gt; true F || F -&amp;gt; false  2.数字类型 Go 语言支持整型和浮点型数字，并且原生支持复数。 Go 也有基于架构的类型，例如：int、uint 和 uintptr。 这些类型的长度都是根据运行程序所在的操作系统类型所决定的： * int 和 uint 在 32 位操作系统上，它们均使用 32 位（4 个字节），在 64 位操作系统上，它们均使用 64 位（8 个字节）。 * uintptr 的长度被设定为足够存放一个指针即可。</description>
    </item>
    
    <item>
      <title>go常量、变量、枚举</title>
      <link>https://loresky.github.io/go/go%E5%B8%B8%E9%87%8F%E5%8F%98%E9%87%8F%E6%9E%9A%E4%B8%BE/</link>
      <pubDate>Sat, 06 Jan 2018 12:38:30 +0000</pubDate>
      
      <guid>https://loresky.github.io/go/go%E5%B8%B8%E9%87%8F%E5%8F%98%E9%87%8F%E6%9E%9A%E4%B8%BE/</guid>
      <description>常量 1. 常量使用关键字 const 定义，用于存储不会改变的数据。 2. 存储在常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型。 3. 在 Go 语言中，你可以省略类型说明符 [type]，因为编译器可以根据变量的值来推断其类型。 * 显式类型定义： const b string = &amp;quot;abc&amp;quot; * 隐式类型定义： const b = &amp;quot;abc&amp;quot;  常量还可以用作枚举：
const ( Unknown = 0 Female = 1 Male = 2 )  枚举 第一个 iota 等于 0，每当 iota 在新的一行被使用时，它的值都会自动加 1；所以 a=0, b=1, c=2 可以简写为如下形式： const ( a = iota b c )  一周中每天的名称 const ( Sunday = iota Monday Tuesday Wednesday Thursday Friday Saturday )  使用某个类型作为枚举常量的类型： type Color int const ( RED Color = iota // 0 ORANGE // 1 YELLOW // 2 GREEN // .</description>
    </item>
    
    <item>
      <title>go文件名、关键字与标识符</title>
      <link>https://loresky.github.io/go/go%E6%96%87%E4%BB%B6%E5%90%8D%E5%85%B3%E9%94%AE%E5%AD%97%E4%B8%8E%E6%A0%87%E8%AF%86%E7%AC%A6/</link>
      <pubDate>Sat, 06 Jan 2018 12:19:54 +0000</pubDate>
      
      <guid>https://loresky.github.io/go/go%E6%96%87%E4%BB%B6%E5%90%8D%E5%85%B3%E9%94%AE%E5%AD%97%E4%B8%8E%E6%A0%87%E8%AF%86%E7%AC%A6/</guid>
      <description> Go 代码中会使用到的 25 个关键字或保留字             break default func interface select   case defer go map struct   chan else goto package switch   const fallthrough if range type   continue for import return var    Go 语言还有 36 个预定义标识ss符                 append bool byte cap close complex complex64 complex128 uint16   copy false float32 float64 imag int int8 int16 uint32   int32 int64 iota len make new nil panic uint64   print println real recover string true uint uint8 uintptr    </description>
    </item>
    
    <item>
      <title>go生成代码文档</title>
      <link>https://loresky.github.io/go/go%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E6%96%87%E6%A1%A3/</link>
      <pubDate>Sat, 06 Jan 2018 12:02:56 +0000</pubDate>
      
      <guid>https://loresky.github.io/go/go%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E6%96%87%E6%A1%A3/</guid>
      <description>go doc 工具会从 Go 程序和包文件中提取顶级声明的首行注释以及每个对象的相关注释，并生成相关文档。
一般用法 **go doc package **获取包的文档注释，例如：go doc fmt 会显示使用 godoc 生成的 fmt 包的文档注释。 **go doc package/subpackage **获取子包的文档注释，例如：go doc container/list。 **go doc package function **获取某个函数在某个包中的文档注释，例如：go doc fmt Printf 会显示有关 fmt.Printf() 的使用说明。</description>
    </item>
    
    <item>
      <title>go打印Printf</title>
      <link>https://loresky.github.io/go/go%E6%89%93%E5%8D%B0printf/</link>
      <pubDate>Sat, 06 Jan 2018 12:01:56 +0000</pubDate>
      
      <guid>https://loresky.github.io/go/go%E6%89%93%E5%8D%B0printf/</guid>
      <description>General ** %v 基本格式的值。当输出结构体时，扩展标志(%+v)添加成员的名字 ** ** %#v 值 ** ** %T 值的类型 ** ** %% 百分号 ** Integer ** %b 二进制 ** ** %c 数值对应的Unicode编码字符 ** ** %d 十进制表示 ** ** %+d 带符号的整型，fmt.Printf(&amp;ldquo;%+d&amp;rdquo;, 255)输出+255 ** ** %o 不带零的八进制 ** ** %q 单引号 ** ** %x 小写的十六进制，使用a-f ** ** %#x 带0x的十六进制 ** ** %X 大写的十六进制，使用A-F ** ** %U Unicode格式： U+1234，等价于&amp;rdquo;U+%04X&amp;rdquo; ** ** %#U 带字符的Unicode ** %5d 表示该整型最大长度是5，下面这段代码
fmt.Printf(&amp;quot;|%5d|&amp;quot;, 1) fmt.Printf(&amp;quot;|%5d|&amp;quot;, 1234567) 输出结果如下： | 1| |1234567|  %-5d则相反，打印结果会自动左对齐 %05d会在数字前面补零</description>
    </item>
    
    <item>
      <title>go环境和目录</title>
      <link>https://loresky.github.io/go/go%E7%8E%AF%E5%A2%83%E5%92%8C%E7%9B%AE%E5%BD%95/</link>
      <pubDate>Wed, 20 Sep 2017 01:53:21 +0000</pubDate>
      
      <guid>https://loresky.github.io/go/go%E7%8E%AF%E5%A2%83%E5%92%8C%E7%9B%AE%E5%BD%95/</guid>
      <description> Go 的源代码有以下三个分支：  Go release：最新稳定版，实际开发最佳选择 Go weekly：包含最近更新的版本，一般每周更新一次 Go tip：永远保持最新的版本，相当于内测版  最为重要的环境变量: **$GOROOT **表示 Go 在你的电脑上的安装位置,它的值一般都是$HOME/go,当然,你也可以安装在别的地方。 **$GOARCH **表示目标机器的处理器架构,它的值可以是 386、amd64 或 arm。 **$GOOS **表示目标机器的操作系统,它的值可以是 darwin、freebsd、linux 或 windows。 **$GOBIN **表示编译器和链接器的安装位置,默认是$GOROOT/bin
**$GOPATH ** 默认采用和 $GOROOT 一样的值，但从 Go 1.1 版本开始，你必须修改为其它路径。它可以包含多个包含 Go 语言源码文件、包文件和可执行文件的路径，而这些路径下又必须分别包含三个规定的目录：src、pkg 和 bin，这三个目录分别用于存放源码文件、包文件和可执行文件。 **$GOARM **专门针对基于 arm 架构的处理器，它的值可以是 5 或 6，默认为 6。 ** $GOMAXPROCS **用于设置应用程序可使用的处理器个数与核数。
Go 安装目录  /bin :包含可执行文件,如:编译器,Go 工具 /doc :包含示例程序,代码工具,本地文档等 /lib :包含文档模版 /misc:包含与支持 Go 编辑器有关的配置文件以及 cgo 的示例 /os_arch /src:包含标准库的包的对象文件(.a):包含源代码构建脚本和标准库的包的完整源代码(Go 是一门开源语言) /src/cmd:包含 Go 和 C 的编译器和命令行脚本  </description>
    </item>
    
  </channel>
</rss>